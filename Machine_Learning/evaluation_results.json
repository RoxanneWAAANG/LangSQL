{
  "accuracy": 0.0,
  "results": [
    {
      "id": 0,
      "question": "Return the names of conductors that do not have the nationality \"USA\".",
      "true_sql": "SELECT name FROM conductor WHERE nationality != 'USA'",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 1,
      "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
      "true_sql": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
      "predicted_sql": "SELECT * FROM conductor ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 2,
      "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
      "true_sql": "SELECT record_company FROM orchestra ORDER BY year_of_founded DESC",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 3,
      "question": "What is the average attendance of shows?",
      "true_sql": "SELECT avg(attendance) FROM SHOW",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 4,
      "question": "Return the average attendance across all shows.",
      "true_sql": "SELECT avg(attendance) FROM SHOW",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 5,
      "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
      "true_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 6,
      "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
      "true_sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 7,
      "question": "How many different nationalities do conductors have?",
      "true_sql": "SELECT count(DISTINCT nationality) FROM conductor",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 8,
      "question": "Count the number of different nationalities of conductors.",
      "true_sql": "SELECT count(DISTINCT nationality) FROM conductor",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 9,
      "question": "List names of conductors in descending order of years of work.",
      "true_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC",
      "predicted_sql": "SELECT * FROM conductor ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 10,
      "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
      "true_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 11,
      "question": "List the name of the conductor with the most years of work.",
      "true_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 12,
      "question": "What is the name of the conductor who has worked the greatest number of years?",
      "true_sql": "SELECT name FROM conductor ORDER BY year_of_work DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id",
      "is_correct": false
    },
    {
      "id": 13,
      "question": "Show the names of conductors and the orchestras they have conducted.",
      "true_sql": "SELECT conductor.name ,  orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 14,
      "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
      "true_sql": "SELECT conductor.name ,  orchestra.orchestra FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 15,
      "question": "Show the names of conductors that have conducted more than one orchestras.",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id GROUP BY orchestra.conductor_id HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 16,
      "question": "What are the names of conductors who have conducted at more than one orchestra?",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id GROUP BY orchestra.conductor_id HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 17,
      "question": "Show the name of the conductor that has conducted the most number of orchestras.",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 18,
      "question": "What is the name of the conductor who has conducted the most orchestras?",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id GROUP BY orchestra.conductor_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 19,
      "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id WHERE year_of_founded  >  2008",
      "predicted_sql": "SELECT * FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id WHERE conductor_id > 2008",
      "is_correct": false
    },
    {
      "id": 20,
      "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
      "true_sql": "SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id  =  orchestra.conductor_id WHERE year_of_founded  >  2008",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id > 2008",
      "is_correct": false
    },
    {
      "id": 21,
      "question": "Please show the different record companies and the corresponding number of orchestras.",
      "true_sql": "SELECT record_company ,  count(*) FROM orchestra GROUP BY record_company",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 22,
      "question": "How many orchestras does each record company manage?",
      "true_sql": "SELECT record_company ,  count(*) FROM orchestra GROUP BY record_company",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 23,
      "question": "Please show the record formats of orchestras in ascending order of count.",
      "true_sql": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC",
      "predicted_sql": "SELECT * FROM conductor ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 24,
      "question": "What are the major record formats of orchestras, sorted by their frequency?",
      "true_sql": "SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) ASC",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 25,
      "question": "List the record company shared by the most number of orchestras.",
      "true_sql": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 26,
      "question": "What is the record company used by the greatest number of orchestras?",
      "true_sql": "SELECT record_company FROM orchestra GROUP BY record_company ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 27,
      "question": "List the names of orchestras that have no performance.",
      "true_sql": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)",
      "predicted_sql": "SELECT * FROM conductor",
      "is_correct": false
    },
    {
      "id": 28,
      "question": "What are the orchestras that do not have any performances?",
      "true_sql": "SELECT orchestra FROM orchestra WHERE orchestra_id NOT IN (SELECT orchestra_id FROM performance)",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 29,
      "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
      "true_sql": "SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id > 2003",
      "is_correct": false
    },
    {
      "id": 30,
      "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
      "true_sql": "SELECT record_company FROM orchestra WHERE year_of_founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE year_of_founded  >  2003",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id > 2003",
      "is_correct": false
    },
    {
      "id": 31,
      "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
      "true_sql": "SELECT count(*) FROM orchestra WHERE major_record_format  =  \"CD\" OR major_record_format  =  \"DVD\"",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 32,
      "question": "Count the number of orchestras that have CD or DVD as their record format.",
      "true_sql": "SELECT count(*) FROM orchestra WHERE major_record_format  =  \"CD\" OR major_record_format  =  \"DVD\"",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 33,
      "question": "Show the years in which orchestras that have given more than one performance are founded.",
      "true_sql": "SELECT year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id  =  performance.orchestra_id GROUP BY performance.orchestra_id HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 34,
      "question": "What are years of founding for orchestras that have had more than a single performance?",
      "true_sql": "SELECT year_of_founded FROM orchestra JOIN performance ON orchestra.orchestra_id  =  performance.orchestra_id GROUP BY performance.orchestra_id HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM conductor WHERE conductor_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 35,
      "question": "How many high schoolers are there?",
      "true_sql": "SELECT count(*) FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 36,
      "question": "Count the number of high schoolers.",
      "true_sql": "SELECT count(*) FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 37,
      "question": "Show the names and grades of each high schooler.",
      "true_sql": "SELECT name ,  grade FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 38,
      "question": "What are the names and grades for each high schooler?",
      "true_sql": "SELECT name ,  grade FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 39,
      "question": "Show all the grades of the high schoolers.",
      "true_sql": "SELECT grade FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 40,
      "question": "What is the grade of each high schooler?",
      "true_sql": "SELECT grade FROM highschooler",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 41,
      "question": "What grade is Kyle in?",
      "true_sql": "SELECT grade FROM highschooler WHERE name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 42,
      "question": "Return the grade for the high schooler named Kyle.",
      "true_sql": "SELECT grade FROM highschooler WHERE name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 43,
      "question": "Show the names of all high schoolers in grade 10.",
      "true_sql": "SELECT name FROM highschooler WHERE grade  =  10",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 10",
      "is_correct": false
    },
    {
      "id": 44,
      "question": "What are the names of all high schoolers in grade 10?",
      "true_sql": "SELECT name FROM highschooler WHERE grade  =  10",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 10",
      "is_correct": false
    },
    {
      "id": 45,
      "question": "Show the ID of the high schooler named Kyle.",
      "true_sql": "SELECT id FROM highschooler WHERE name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 46,
      "question": "What is Kyle's id?",
      "true_sql": "SELECT id FROM highschooler WHERE name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 47,
      "question": "How many high schoolers are there in grade 9 or 10?",
      "true_sql": "SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 9",
      "is_correct": false
    },
    {
      "id": 48,
      "question": "Count the number of high schoolers in grades 9 or 10.",
      "true_sql": "SELECT count(*) FROM highschooler WHERE grade  =  9 OR grade  =  10",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 9",
      "is_correct": false
    },
    {
      "id": 49,
      "question": "Show the number of high schoolers for each grade.",
      "true_sql": "SELECT grade ,  count(*) FROM highschooler GROUP BY grade",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 50,
      "question": "How many high schoolers are in each grade?",
      "true_sql": "SELECT grade ,  count(*) FROM highschooler GROUP BY grade",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 51,
      "question": "Which grade has the most high schoolers?",
      "true_sql": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 52,
      "question": "Return the grade that has the greatest number of high schoolers.",
      "true_sql": "SELECT grade FROM highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 53,
      "question": "Show me all grades that have at least 4 students.",
      "true_sql": "SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id",
      "is_correct": false
    },
    {
      "id": 54,
      "question": "Which grades have 4 or more high schoolers?",
      "true_sql": "SELECT grade FROM highschooler GROUP BY grade HAVING count(*)  >=  4",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 4",
      "is_correct": false
    },
    {
      "id": 55,
      "question": "Show the student IDs and numbers of friends corresponding to each.",
      "true_sql": "SELECT student_id ,  count(*) FROM friend GROUP BY student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 56,
      "question": "How many friends does each student have?",
      "true_sql": "SELECT student_id ,  count(*) FROM friend GROUP BY student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 57,
      "question": "Show the names of high school students and their corresponding number of friends.",
      "true_sql": "SELECT highschooler.name ,  count(*) FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 58,
      "question": "What are the names of the high schoolers and how many friends does each have?",
      "true_sql": "SELECT highschooler.name ,  count(*) FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 59,
      "question": "What is the name of the high schooler who has the greatest number of friends?",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 60,
      "question": "Return the name of the high school student with the most friends.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 61,
      "question": "Show the names of high schoolers who have at least 3 friends.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id HAVING count(*)  >=  3",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 62,
      "question": "What are the names of high schoolers who have 3 or more friends?",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id GROUP BY friend.student_id HAVING count(*)  >=  3",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 3",
      "is_correct": false
    },
    {
      "id": 63,
      "question": "Show the names of all of the high schooler Kyle's friends.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id JOIN highschooler ON friend.friend_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 64,
      "question": "Return the names of friends of the high school student Kyle.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id JOIN highschooler ON friend.friend_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 65,
      "question": "How many friends does the high school student Kyle have?",
      "true_sql": "SELECT count(*) FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 66,
      "question": "Count the number of friends Kyle has.",
      "true_sql": "SELECT count(*) FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 67,
      "question": "Show ids of all students who do not have any friends.",
      "true_sql": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 68,
      "question": "What are the ids of high school students who do not have friends?",
      "true_sql": "SELECT id FROM highschooler EXCEPT SELECT student_id FROM friend",
      "predicted_sql": "SELECT * FROM friend WHERE friend_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 69,
      "question": "Show names of all high school students who do not have any friends.",
      "true_sql": "SELECT name FROM highschooler EXCEPT SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 70,
      "question": "What are the names of students who have no friends?",
      "true_sql": "SELECT name FROM highschooler EXCEPT SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 71,
      "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
      "true_sql": "SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 72,
      "question": "What are the ids of students who both have friends and are liked?",
      "true_sql": "SELECT student_id FROM friend INTERSECT SELECT liked_id FROM likes",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 73,
      "question": "Show name of all students who have some friends and also are liked by someone else.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON likes.student_id  =  highschooler.id INTERSECT SELECT highschooler.name FROM likes JOIN highschooler ON likes.liked_id  =  highschooler.id",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 74,
      "question": "What are the names of high schoolers who both have friends and are liked?",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON likes.student_id  =  highschooler.id INTERSECT SELECT highschooler.name FROM likes JOIN highschooler ON likes.liked_id  =  highschooler.id",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 75,
      "question": "Count the number of likes for each student id.",
      "true_sql": "SELECT student_id ,  count(*) FROM likes GROUP BY student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 76,
      "question": "How many likes correspond to each student id?",
      "true_sql": "SELECT student_id ,  count(*) FROM likes GROUP BY student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 77,
      "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
      "true_sql": "SELECT highschooler.name ,  count(*) FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 78,
      "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
      "true_sql": "SELECT highschooler.name ,  count(*) FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id",
      "is_correct": false
    },
    {
      "id": 79,
      "question": "What is the name of the high schooler who has the greatest number of likes?",
      "true_sql": "SELECT highschooler.name FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 80,
      "question": "Give the name of the student with the most likes.",
      "true_sql": "SELECT highschooler.name FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 81,
      "question": "Show the names of students who have at least 2 likes.",
      "true_sql": "SELECT highschooler.name FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id",
      "is_correct": false
    },
    {
      "id": 82,
      "question": "What are the names of students who have 2 or more likes?",
      "true_sql": "SELECT highschooler.name FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id GROUP BY likes.student_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id > 2",
      "is_correct": false
    },
    {
      "id": 83,
      "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id WHERE highschooler.grade  >  5 GROUP BY friend.student_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id",
      "is_correct": false
    },
    {
      "id": 84,
      "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
      "true_sql": "SELECT highschooler.name FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id WHERE highschooler.grade  >  5 GROUP BY friend.student_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id > 5",
      "is_correct": false
    },
    {
      "id": 85,
      "question": "How many likes does Kyle have?",
      "true_sql": "SELECT count(*) FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 86,
      "question": "Return the number of likes that the high schooler named Kyle has.",
      "true_sql": "SELECT count(*) FROM likes JOIN highschooler ON likes.student_id  =  highschooler.id WHERE highschooler.name  =  \"Kyle\"",
      "predicted_sql": "SELECT * FROM highschooler",
      "is_correct": false
    },
    {
      "id": 87,
      "question": "Find the average grade of all students who have some friends.",
      "true_sql": "SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend.student_id FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id)",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 88,
      "question": "What is the average grade of students who have friends?",
      "true_sql": "SELECT avg(grade) FROM highschooler WHERE id IN (SELECT friend.student_id FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id)",
      "predicted_sql": "SELECT * FROM highschooler WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 89,
      "question": "Find the minimum grade of students who have no friends.",
      "true_sql": "SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT friend.student_id FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id)",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id",
      "is_correct": false
    },
    {
      "id": 90,
      "question": "What is the lowest grade of students who do not have any friends?",
      "true_sql": "SELECT min(grade) FROM highschooler WHERE id NOT IN (SELECT friend.student_id FROM friend JOIN highschooler ON friend.student_id  =  highschooler.id)",
      "predicted_sql": "SELECT * FROM highschooler JOIN friend ON highschooler.highschooler_id = friend.highschooler_id WHERE highschooler_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 91,
      "question": "Which states have both owners and professionals living there?",
      "true_sql": "SELECT state FROM owners INTERSECT SELECT state FROM professionals",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 92,
      "question": "Find the states where both owners and professionals live.",
      "true_sql": "SELECT state FROM owners INTERSECT SELECT state FROM professionals",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 93,
      "question": "What is the average age of the dogs who have gone through any treatments?",
      "true_sql": "SELECT avg(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 94,
      "question": "Find the average age of the dogs who went through treatments.",
      "true_sql": "SELECT avg(age) FROM dogs WHERE dog_id IN ( SELECT dog_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 95,
      "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
      "true_sql": "SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' UNION SELECT professionals.professional_id ,  professionals.last_name ,  professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id > 2",
      "is_correct": false
    },
    {
      "id": 96,
      "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
      "true_sql": "SELECT professional_id ,  last_name ,  cell_number FROM professionals WHERE state  =  'Indiana' UNION SELECT professionals.professional_id ,  professionals.last_name ,  professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 97,
      "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
      "true_sql": "SELECT name FROM dogs WHERE dog_id not in ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id > 1000",
      "is_correct": false
    },
    {
      "id": 98,
      "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
      "true_sql": "SELECT name FROM dogs WHERE dog_id not in ( SELECT dog_id FROM treatments GROUP BY dog_id HAVING sum(cost_of_treatment)  >  1000 )",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id > 1000",
      "is_correct": false
    },
    {
      "id": 99,
      "question": "Which first names are used for professionals or owners but are not used as dog names?",
      "true_sql": "SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 100,
      "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
      "true_sql": "SELECT first_name FROM professionals UNION SELECT first_name FROM owners EXCEPT SELECT name FROM dogs",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 101,
      "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
      "true_sql": "SELECT professional_id ,  role_code ,  email_address FROM professionals EXCEPT SELECT professionals.professional_id ,  professionals.role_code ,  professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 102,
      "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
      "true_sql": "SELECT professional_id ,  role_code ,  email_address FROM professionals EXCEPT SELECT professionals.professional_id ,  professionals.role_code ,  professionals.email_address FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 103,
      "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
      "true_sql": "SELECT dogs.owner_id ,  owners.first_name ,  owners.last_name FROM dogs JOIN owners ON dogs.owner_id  =  owners.owner_id GROUP BY dogs.owner_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 104,
      "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
      "true_sql": "SELECT dogs.owner_id ,  owners.first_name ,  owners.last_name FROM dogs JOIN owners ON dogs.owner_id  =  owners.owner_id GROUP BY dogs.owner_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 105,
      "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
      "true_sql": "SELECT professionals.professional_id ,  professionals.role_code ,  professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id",
      "is_correct": false
    },
    {
      "id": 106,
      "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
      "true_sql": "SELECT professionals.professional_id ,  professionals.role_code ,  professionals.first_name FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 107,
      "question": "What is the name of the breed with the most dogs?",
      "true_sql": "SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code  =  dogs.breed_code GROUP BY breeds.breed_name ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 108,
      "question": "Which breed do the most dogs have? Give me the breed name.",
      "true_sql": "SELECT breeds.breed_name FROM breeds JOIN dogs ON breeds.breed_code  =  dogs.breed_code GROUP BY breeds.breed_name ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 109,
      "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
      "true_sql": "SELECT owners.owner_id ,  owners.last_name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 110,
      "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
      "true_sql": "SELECT owners.owner_id ,  owners.last_name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owners.owner_id ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 111,
      "question": "What is the description of the treatment type that costs the least money in total?",
      "true_sql": "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code  =  treatments.treatment_type_code GROUP BY treatment_types.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 112,
      "question": "Give me the description of the treatment type whose total cost is the lowest.",
      "true_sql": "SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code  =  treatments.treatment_type_code GROUP BY treatment_types.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 113,
      "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
      "true_sql": "SELECT owners.owner_id ,  owners.zip_code FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 114,
      "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
      "true_sql": "SELECT owners.owner_id ,  owners.zip_code FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id JOIN treatments ON dogs.dog_id  =  treatments.dog_id GROUP BY owners.owner_id ORDER BY sum(treatments.cost_of_treatment) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 115,
      "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
      "true_sql": "SELECT professionals.professional_id ,  professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id",
      "is_correct": false
    },
    {
      "id": 116,
      "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
      "true_sql": "SELECT professionals.professional_id ,  professionals.cell_number FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id GROUP BY professionals.professional_id HAVING count(*)  >=  2",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id",
      "is_correct": false
    },
    {
      "id": 117,
      "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
      "true_sql": "SELECT DISTINCT professionals.first_name ,  professionals.last_name FROM professionals JOIN treatments WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 118,
      "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
      "true_sql": "SELECT DISTINCT professionals.first_name ,  professionals.last_name FROM professionals JOIN treatments WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 119,
      "question": "List the date of each treatment, together with the first name of the professional who operated it.",
      "true_sql": "SELECT treatments.date_of_treatment ,  professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id  =  professionals.professional_id",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 120,
      "question": "What are the date and the operating professional's first name of each treatment?",
      "true_sql": "SELECT treatments.date_of_treatment ,  professionals.first_name FROM treatments JOIN professionals ON treatments.professional_id  =  professionals.professional_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 121,
      "question": "List the cost of each treatment and the corresponding treatment type description.",
      "true_sql": "SELECT treatments.cost_of_treatment ,  treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 122,
      "question": "What are the cost and treatment type description of each treatment?",
      "true_sql": "SELECT treatments.cost_of_treatment ,  treatment_types.treatment_type_description FROM treatments JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 123,
      "question": "List each owner's first name, last name, and the size of his for her dog.",
      "true_sql": "SELECT owners.first_name ,  owners.last_name ,  dogs.size_code FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 124,
      "question": "What are each owner's first name, last name, and the size of their dog?",
      "true_sql": "SELECT owners.first_name ,  owners.last_name ,  dogs.size_code FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 125,
      "question": "List pairs of the owner's first name and the dogs's name.",
      "true_sql": "SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 126,
      "question": "What are each owner's first name and their dogs's name?",
      "true_sql": "SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 127,
      "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
      "true_sql": "SELECT dogs.name ,  treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id WHERE dogs.breed_code  =  ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 128,
      "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
      "true_sql": "SELECT dogs.name ,  treatments.date_of_treatment FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id WHERE dogs.breed_code  =  ( SELECT breed_code FROM dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 129,
      "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
      "true_sql": "SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state  =  'Virginia'",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 130,
      "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
      "true_sql": "SELECT owners.first_name ,  dogs.name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE owners.state  =  'Virginia'",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 131,
      "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
      "true_sql": "SELECT DISTINCT dogs.date_arrived ,  dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 132,
      "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
      "true_sql": "SELECT DISTINCT dogs.date_arrived ,  dogs.date_departed FROM dogs JOIN treatments ON dogs.dog_id  =  treatments.dog_id",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 133,
      "question": "List the last name of the owner owning the youngest dog.",
      "true_sql": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE dogs.age  =  ( SELECT max(age) FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 134,
      "question": "Who owns the youngest dog? Give me his or her last name.",
      "true_sql": "SELECT owners.last_name FROM owners JOIN dogs ON owners.owner_id  =  dogs.owner_id WHERE dogs.age  =  ( SELECT max(age) FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 135,
      "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
      "true_sql": "SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 136,
      "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
      "true_sql": "SELECT email_address FROM professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 137,
      "question": "What are the arriving date and the departing date of all the dogs?",
      "true_sql": "SELECT date_arrived ,  date_departed FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 138,
      "question": "List the arrival date and the departure date for all the dogs.",
      "true_sql": "SELECT date_arrived ,  date_departed FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 139,
      "question": "How many dogs went through any treatments?",
      "true_sql": "SELECT count(DISTINCT dog_id) FROM treatments",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 140,
      "question": "Count the number of dogs that went through a treatment.",
      "true_sql": "SELECT count(DISTINCT dog_id) FROM treatments",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 141,
      "question": "How many professionals have performed any treatment to dogs?",
      "true_sql": "SELECT count(DISTINCT professional_id) FROM treatments",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 142,
      "question": "Find the number of professionals who have ever treated dogs.",
      "true_sql": "SELECT count(DISTINCT professional_id) FROM treatments",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 143,
      "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
      "true_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 144,
      "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
      "true_sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 145,
      "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
      "true_sql": "SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 146,
      "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
      "true_sql": "SELECT first_name ,  last_name ,  email_address FROM owners WHERE state LIKE '%North%'",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 147,
      "question": "How many dogs have an age below the average?",
      "true_sql": "SELECT count(*) FROM dogs WHERE age  <  ( SELECT avg(age) FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 148,
      "question": "Count the number of dogs of an age below the average.",
      "true_sql": "SELECT count(*) FROM dogs WHERE age  <  ( SELECT avg(age) FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 149,
      "question": "How much does the most recent treatment cost?",
      "true_sql": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds JOIN charges ON breeds.breeds_id = charges.breeds_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 150,
      "question": "Show me the cost of the most recently performed treatment.",
      "true_sql": "SELECT cost_of_treatment FROM treatments ORDER BY date_of_treatment DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 151,
      "question": "How many dogs have not gone through any treatment?",
      "true_sql": "SELECT count(*) FROM dogs WHERE dog_id NOT IN ( SELECT dog_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 152,
      "question": "Tell me the number of dogs that have not received any treatment .",
      "true_sql": "SELECT count(*) FROM dogs WHERE dog_id not in ( SELECT dog_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 153,
      "question": "How many owners temporarily do not have any dogs?",
      "true_sql": "SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 154,
      "question": "Find the number of owners who do not own any dogs at this moment.",
      "true_sql": "SELECT count(*) FROM owners WHERE owner_id NOT IN ( SELECT owner_id FROM dogs )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 155,
      "question": "How many professionals did not operate any treatment on dogs?",
      "true_sql": "SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 156,
      "question": "Find the number of professionals who have not treated any dogs.",
      "true_sql": "SELECT count(*) FROM professionals WHERE professional_id NOT IN ( SELECT professional_id FROM treatments )",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 157,
      "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
      "true_sql": "SELECT name ,  age ,  weight FROM dogs WHERE abandoned_yn  =  1",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 158,
      "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
      "true_sql": "SELECT name ,  age ,  weight FROM dogs WHERE abandoned_yn  =  1",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id > 1",
      "is_correct": false
    },
    {
      "id": 159,
      "question": "What is the average age of all the dogs?",
      "true_sql": "SELECT avg(age) FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 160,
      "question": "Compute the average age of all the dogs.",
      "true_sql": "SELECT avg(age) FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 161,
      "question": "What is the age of the oldest dog?",
      "true_sql": "SELECT max(age) FROM dogs",
      "predicted_sql": "SELECT * FROM breeds WHERE breeds_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 162,
      "question": "Tell me the age of the oldest dog.",
      "true_sql": "SELECT max(age) FROM dogs",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 163,
      "question": "How much does each charge type costs? List both charge type and amount.",
      "true_sql": "SELECT charge_type ,  charge_amount FROM charges",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 164,
      "question": "List each charge type and its amount.",
      "true_sql": "SELECT charge_type ,  charge_amount FROM charges",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 165,
      "question": "How much does the most expensive charge type costs?",
      "true_sql": "SELECT max(charge_amount) FROM charges",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 166,
      "question": "What is the charge amount of the most expensive charge type?",
      "true_sql": "SELECT max(charge_amount) FROM charges",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 167,
      "question": "List the email, cell phone and home phone of all the professionals.",
      "true_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 168,
      "question": "What are the email, cell phone and home phone of each professional?",
      "true_sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 169,
      "question": "What are all the possible breed type and size type combinations?",
      "true_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 170,
      "question": "Find the distinct breed type and size type combinations for dogs.",
      "true_sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 171,
      "question": "List the first name of all the professionals along with the description of the treatment they have done.",
      "true_sql": "SELECT DISTINCT professionals.first_name ,  treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code",
      "predicted_sql": "SELECT * FROM breeds ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 172,
      "question": "What are each professional's first name and description of the treatment they have performed?",
      "true_sql": "SELECT DISTINCT professionals.first_name ,  treatment_types.treatment_type_description FROM professionals JOIN treatments ON professionals.professional_id  =  treatments.professional_id JOIN treatment_types ON treatments.treatment_type_code  =  treatment_types.treatment_type_code",
      "predicted_sql": "SELECT * FROM breeds",
      "is_correct": false
    },
    {
      "id": 173,
      "question": "How many singers are there?",
      "true_sql": "SELECT count(*) FROM singer",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 174,
      "question": "What is the count of singers?",
      "true_sql": "SELECT count(*) FROM singer",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 175,
      "question": "List the name of singers in ascending order of net worth.",
      "true_sql": "SELECT name FROM singer ORDER BY net_worth_millions ASC",
      "predicted_sql": "SELECT * FROM singer ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 176,
      "question": "What are the names of singers ordered by ascending net worth?",
      "true_sql": "SELECT name FROM singer ORDER BY net_worth_millions ASC",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 177,
      "question": "What are the birth year and citizenship of singers?",
      "true_sql": "SELECT birth_year ,  citizenship FROM singer",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 178,
      "question": "What are the birth years and citizenships of the singers?",
      "true_sql": "SELECT birth_year ,  citizenship FROM singer",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 179,
      "question": "List the name of singers whose citizenship is not \"France\".",
      "true_sql": "SELECT name FROM singer WHERE citizenship != \"France\"",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 180,
      "question": "What are the names of the singers who are not French citizens?",
      "true_sql": "SELECT name FROM singer WHERE citizenship != \"France\"",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 181,
      "question": "Show the name of singers whose birth year is either 1948 or 1949?",
      "true_sql": "SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id > 1948",
      "is_correct": false
    },
    {
      "id": 182,
      "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
      "true_sql": "SELECT name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id > 1948",
      "is_correct": false
    },
    {
      "id": 183,
      "question": "What is the name of the singer with the largest net worth?",
      "true_sql": "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM singer JOIN song ON singer.singer_id = song.singer_id WHERE singer_id IS NOT NULL ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 184,
      "question": "What is the name of the singer who is worth the most?",
      "true_sql": "SELECT name FROM singer ORDER BY net_worth_millions DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM singer JOIN song ON singer.singer_id = song.singer_id ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 185,
      "question": "Show different citizenship of singers and the number of singers of each citizenship.",
      "true_sql": "SELECT citizenship ,  count(*) FROM singer GROUP BY citizenship",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 186,
      "question": "For each citizenship, how many singers are from that country?",
      "true_sql": "SELECT citizenship ,  count(*) FROM singer GROUP BY citizenship",
      "predicted_sql": "SELECT * FROM singer JOIN song ON singer.singer_id = song.singer_id",
      "is_correct": false
    },
    {
      "id": 187,
      "question": "Please show the most common citizenship of singers.",
      "true_sql": "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM singer ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 188,
      "question": "What is the most common singer citizenship ?",
      "true_sql": "SELECT citizenship FROM singer GROUP BY citizenship ORDER BY count(*) DESC LIMIT 1",
      "predicted_sql": "SELECT * FROM singer ORDER BY SELECT(*) ASC",
      "is_correct": false
    },
    {
      "id": 189,
      "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
      "true_sql": "SELECT citizenship ,  max(net_worth_millions) FROM singer GROUP BY citizenship",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 190,
      "question": "For each citizenship, what is the maximum net worth?",
      "true_sql": "SELECT citizenship ,  max(net_worth_millions) FROM singer GROUP BY citizenship",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 191,
      "question": "Show titles of songs and names of singers.",
      "true_sql": "SELECT song.title ,  singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 192,
      "question": "What are the song titles and singer names?",
      "true_sql": "SELECT song.title ,  singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 193,
      "question": "Show distinct names of singers that have songs with sales more than 300000.",
      "true_sql": "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id WHERE song.sales  >  300000",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 194,
      "question": "what are the different names of the singers that have sales more than 300000?",
      "true_sql": "SELECT DISTINCT singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id WHERE song.sales  >  300000",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 195,
      "question": "Show the names of singers that have more than one song.",
      "true_sql": "SELECT singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id GROUP BY singer.name HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 196,
      "question": "What are the names of the singers that have more than one songs?",
      "true_sql": "SELECT singer.name FROM singer JOIN song ON singer.singer_id  =  song.singer_id GROUP BY singer.name HAVING count(*)  >  1",
      "predicted_sql": "SELECT * FROM singer JOIN song ON singer.singer_id = song.singer_id",
      "is_correct": false
    },
    {
      "id": 197,
      "question": "Show the names of singers and the total sales of their songs.",
      "true_sql": "SELECT singer.name ,  sum(song.sales) FROM singer JOIN song ON singer.singer_id  =  song.singer_id GROUP BY singer.name",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 198,
      "question": "For each singer name, what is the total sales for their songs?",
      "true_sql": "SELECT singer.name ,  sum(song.sales) FROM singer JOIN song ON singer.singer_id  =  song.singer_id GROUP BY singer.name",
      "predicted_sql": "SELECT * FROM singer",
      "is_correct": false
    },
    {
      "id": 199,
      "question": "List the name of singers that do not have any song.",
      "true_sql": "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 200,
      "question": "What is the sname of every sing that does not have any song?",
      "true_sql": "SELECT name FROM singer WHERE singer_id NOT IN (SELECT singer_id FROM song)",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 201,
      "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
      "true_sql": "SELECT citizenship FROM singer WHERE birth_year  <  1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year  >  1955",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id > 1945",
      "is_correct": false
    },
    {
      "id": 202,
      "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
      "true_sql": "SELECT citizenship FROM singer WHERE birth_year  <  1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year  >  1955",
      "predicted_sql": "SELECT * FROM singer WHERE singer_id > 1945",
      "is_correct": false
    },
    {
      "id": 203,
      "question": "How many available features are there in total?",
      "true_sql": "SELECT count(*) FROM other_available_features",
      "predicted_sql": "SELECT * FROM ref_feature_types",
      "is_correct": false
    },
    {
      "id": 204,
      "question": "What is the feature type name of feature AirCon?",
      "true_sql": "SELECT ref_feature_types.feature_type_name FROM other_available_features JOIN ref_feature_types ON other_available_features.feature_type_code  =  ref_feature_types.feature_type_code WHERE other_available_features.feature_name  =  \"AirCon\"",
      "predicted_sql": "SELECT * FROM ref_feature_types WHERE ref_feature_types_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 205,
      "question": "Show the property type descriptions of properties belonging to that code.",
      "true_sql": "SELECT ref_property_types.property_type_description FROM properties JOIN ref_property_types ON properties.property_type_code  =  ref_property_types.property_type_code GROUP BY properties.property_type_code",
      "predicted_sql": "SELECT * FROM ref_feature_types WHERE ref_feature_types_id IS NOT NULL",
      "is_correct": false
    },
    {
      "id": 206,
      "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
      "true_sql": "SELECT property_name FROM properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
      "predicted_sql": "SELECT * FROM ref_feature_types WHERE ref_feature_types_id > 1",
      "is_correct": false
    }
  ]
}